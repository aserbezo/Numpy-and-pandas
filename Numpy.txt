import numpy as np

Task 1.
Create the following pattern by starting from a 5 by 5 null matrix:
[[5 5 5 5 5]
 [5 0 0 0 5]
 [5 0 0 0 5]
 [5 0 0 0 5]
 [5 5 5 5 5]]
 
 #YOUR CODE HERE
arr = np.zeros((5,5),dtype=int)
arr[[0,-1],:] = 5
arr[:, [0,-1]] = 5
print(arr)

[[5 5 5 5 5]
 [5 0 0 0 5]
 [5 0 0 0 5]
 [5 0 0 0 5]
 [5 5 5 5 5]]
 
 ----------------------------------------------------------------------------------------
 
 Task 2.Â¶
Make a vector (1d array) containing the integer numbers from 5 to 29.

#YOUR CODE HERE
print(np.arange(5,30))

[ 5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]

-----------------------------------------------------------------------------------------------
Task 3.
Make a null vector (1d array) with twenty elements. Change the value of the thrid element to 3.

#YOUR CODE HERE
arr_1 = np.zeros(20,dtype=int)
arr_1[2] = 3
print(arr_1)
[0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]

--------------------------------------------------------------------------------------------------
Task 4.
You are given the following array: [1, 2, 3, 4, 5, 6, 7, 8, 9]. Reverse it and print the result.

#YOUR CODE HERE
lists = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
print(lists)
print(np.flipud(lists))

[1 2 3 4 5 6 7 8 9]
[9 8 7 6 5 4 3 2 1]

-------------------------------------------------------------------------------------------------------------------------------
Task 5.
You are given the following array: [0, 7, 0, 3, 4, 0, 15, 0]. Find and print the indices of all non-zero elements of the vector.

#YOUR CODE HERE

array = np.array([0, 7, 0, 3, 4, 0, 15, 0])
print(np.nonzero(array))

(array([1, 3, 4, 6], dtype=int64),)

---------------------------------------------------------------------------------
Task 6.
Create the following matrix by starting from a 5 by 5 identity matrix.
[[0 0 0 0 5]
 [0 0 0 5 0]
 [0 0 5 0 0]
 [0 5 0 0 0]
 [5 0 0 0 0]]
 
 #YOUR CODE HERE
matrix = np.zeros((5,5),int)
np.fill_diagonal(np.fliplr(matrix), 5)
print(matrix)

[[0 0 0 0 5]
 [0 0 0 5 0]
 [0 0 5 0 0]
 [0 5 0 0 0]
 [5 0 0 0 0]]
 

------------------------------------------------------------------------------------------------------
 Task 7.
Fill a 10 by 10 array with random values and print out the maximum value as well as the minimum value.

#YOUR CODE HERE
matrix_10 = np.random.random((10,10))
matrix_10_max, matrix_10_min = matrix_10.max(), matrix_10.min()
print(f"Max : {matrix_10_max} Min : {matrix_10_min}")

print(np.shape(matrix_10))

Max : 0.996005165901491 Min : 0.017360814086144205
(10, 10)

-------------------------------------------------------------------------------------------------------
Task 8.
Create a matrix of all zeroes which contains the odd numbers from 1 to 10 above the secondary diagonal.
[[0 0 0 0 9 0]
 [0 0 0 7 0 0]
 [0 0 5 0 0 0]
 [0 3 0 0 0 0]
 [1 0 0 0 0 0]
 [0 0 0 0 0 0]]
 
 #YOUR CODE HERE
matrix_above_second_diag = np.flipud(np.diag(np.arange(1,10,2), k=-1))

print(matrix_above_second_dia)

[[0 0 0 0 9 0]
 [0 0 0 7 0 0]
 [0 0 5 0 0 0]
 [0 3 0 0 0 0]
 [1 0 0 0 0 0]
 [0 0 0 0 0 0]]
 
 -----------------------------------------------------------------------
 Task 9.
Create the following pattern using the tile function:
[[7 0 7 0 7 0 7 0]
 [0 7 0 7 0 7 0 7]
 [7 0 7 0 7 0 7 0]
 [0 7 0 7 0 7 0 7]
 [7 0 7 0 7 0 7 0]
 [0 7 0 7 0 7 0 7]
 [7 0 7 0 7 0 7 0]
 [0 7 0 7 0 7 0 7]]
 
 #YOUR CODE HERE

checkmate = [[7,0],[0,7]]
checkmate = np.tile(checkmate,(4,4))
print(checkmate)

[[7 0 7 0 7 0 7 0]
 [0 7 0 7 0 7 0 7]
 [7 0 7 0 7 0 7 0]
 [0 7 0 7 0 7 0 7]
 [7 0 7 0 7 0 7 0]
 [0 7 0 7 0 7 0 7]
 [7 0 7 0 7 0 7 0]
 [0 7 0 7 0 7 0 7]]
 

------------------------------------------------------------------------------------------------
 
 Tsks 10.
Create the following pattern by starting from a 6 by 8 null matrix and using slicing:
[[0 5 0 5 0 5 0 5]
 [3 0 3 0 3 0 3 0]
 [0 5 0 5 0 5 0 5]
 [3 0 3 0 3 0 3 0]
 [0 5 0 5 0 5 0 5]
 [3 0 3 0 3 0 3 0]]
 
 #YOUR CODE HERE

pattern = np.zeros((6,8),dtype=int)
pattern[1::2,::2] = 3
pattern[::2,1::2] = 5
print(pattern)

[[0 5 0 5 0 5 0 5]
 [3 0 3 0 3 0 3 0]
 [0 5 0 5 0 5 0 5]
 [3 0 3 0 3 0 3 0]
 [0 5 0 5 0 5 0 5]
 [3 0 3 0 3 0 3 0]]
 
----------------------------------------------------------------------------------------------------------------------
 
 Taks 11.
Make a vector (1d array) with 10 random integer values, replace the maximum element by 999 and print out the vector.

#YOUR CODE HERE
numbers = np.random.randint(0, 100, size= 10)

numbers[numbers.argmax()] = 999
print(numbers)

[ 39  55 999  17  46  18   5  66  57  63]

----------------------------------------------
Taks 12.
You have the following 2 matrices:
C = |3|
       |2|
       |1|
D = |5 6|

Print out the matrix which is the product of C and D (P = C x D). Print out the shape of that resulting matrix as well as the sum of all its elements.

#YOUR CODE HERE
c = [[3],[2],[1]]
d = [56]
p = np.multiply(c, d)
print(p.shape)
print(np.sum(p))

(3, 1)
336

--------------------------------------------------------------------------------------------------------------------------------------------
Problem 13.
You have the following array [ 1.1, nan, 3.3, 4.4, 5.5, nan, 7.7, 8.8, nan]. Replace all NaN values with 0 and print out the resulting array.

#YOUR CODE HERE


array_data = np.array([1.1, np.nan, 3.3, 4.4, 5.5, np.nan, 7.7, 8.8, np.nan])



output = np.nan_to_num(array_data, 0)
print(output)

[ 1.1  0.   3.3  4.4  5.5  0.   7.7  8.8  0. ]